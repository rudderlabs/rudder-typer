/**
 * {{autogeneratedFileWarning}}
 */

{{#if isDevelopment}}
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 * 
 * You can install it with: `npm install --save-dev ajv`.
 *
 * In order to support run-time validation of draft-04 JSON Schema we are using `ajv-draft-04`.
 * You can install it with: `npm install --save-dev ajv-draft-04`.
 *
 */
import Ajv, { ErrorObject } from 'ajv'
import AjvDraft4 from 'ajv-draft-04'
{{/if}}

{{#if isBrowser}}

import type { RudderAnalytics, RudderAnalyticsPreloader, ApiOptions, ApiObject } from '@rudderstack/analytics-js';
/**
 * The analytics instance should be available via window.rudderanalytics.
 * You can install it by following instructions at: https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-javascript-sdk/installation/
 */
declare global {
  interface Window {
    rudderanalytics: RudderAnalytics | RudderAnalyticsPreloader | undefined;
  }
}

type apiCallback = (data?: any) => void;

{{else}}
import AnalyticsNode, {
  apiObject as ApiObject,
  apiCallback,
  TrackParams,
  PageParams,
  ScreenParams,
  IdentifyParams,
  GroupParams,
} from '@rudderstack/rudder-sdk-node';

/**
 * An ID associated with the user. Note: at least one of userId or anonymousId must be included!
 **/
type IdentityOptions =
  | { userId: string; anonymousId?: string }
  | { userId?: string; anonymousId: string }

export type TrackMessage<PropertiesType> = {
  properties: PropertiesType;
} & Omit<TrackParams, 'event' | 'properties'> &
  IdentityOptions &
  Record<string, any>;

export type PageMessage<PropertiesType> = {
  properties: PropertiesType;
} & Omit<PageParams, 'name' | 'properties'> &
  IdentityOptions &
  Record<string, any>;

export type ScreenMessage<PropertiesType> = {
  properties: PropertiesType;
} & Omit<ScreenParams, 'name' | 'properties'> &
  IdentityOptions &
  Record<string, any>;

export type IdentifyMessage<PropertiesType> = {
  traits: PropertiesType;
} & Omit<IdentifyParams, 'traits'> &
  IdentityOptions &
  Record<string, any>;

export type GroupMessage<PropertiesType> = {
  groupId: string;
  traits: PropertiesType;
} & Omit<GroupParams, 'groupId' | 'traits'> &
  IdentityOptions &
  Record<string, any>;

export type PayloadMessage<PropertiesType> =
  | TrackMessage<PropertiesType>
  | PageMessage<PropertiesType>
  | ScreenMessage<PropertiesType>
  | IdentifyMessage<PropertiesType>
  | GroupMessage<PropertiesType>;
{{/if}}

{{#if isDevelopment}}
/** The Schema object which is being used by Ajv to validate the message */
export interface Schema {
	$schema? : string 
	description? : string
	properties? : object
	title? : string
	type? : string
}
{{/if}}

{{#each objects}}
{{#each properties}}
{{#if hasEnum}}
export enum {{enumName}} {
	{{enumValues}}
}
{{/if}}
{{/each}}

{{#if (or (not ../isBrowser) (and ../isBrowser (not (eq name "Screen"))))}}
	{{#if description}}
	/**
	* {{description}}
	*/
	{{/if}}
	export interface {{name}} {{#unless ../isBrowser}} extends ApiObject {{/unless}} {
		{{#each properties}}
		{{#if description}}
		/**
		* {{description}}
		*/
		{{/if}}
		'{{name}}'{{#unless isRequired}}?{{/unless}}: {{#if hasEnum}}{{enumName}}{{else}}{{type}}{{/if}}
		{{/each}}
	}
{{/if}}

{{/each}}
export type ViolationHandler = (
	message: {{#if isBrowser}}Record<string, any>{{else}}PayloadMessage<Record<string, any>>{{/if}},
	{{!-- Swap the type definitions here so we don't want depend on ajv in production just for this type definition. --}}
	violations: {{#if isDevelopment}}ErrorObject{{else}}any{{/if}}[]
) => void

{{#if isDevelopment}}
/**
 * The default handler that is fired if none is supplied with setRudderTyperOptions.
 {{#if isBrowser}}
 * This handler will log a warning message to the console.
 {{else}}
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 {{/if}}
 */
export const defaultValidationErrorHandler: ViolationHandler = (message, violations) => {
	const msg = JSON.stringify({
		type: 'RudderTyper JSON Schema Validation Error',
		description:
			`You made an analytics call (${message.event}) using RudderTyper that doesn't match the ` +
			'Tracking Plan spec.',
		errors: violations,
	}, undefined, 2)

	{{#unless isBrowser}}
	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	{{/unless}}
	console.warn(msg)
}

let onViolation = defaultValidationErrorHandler
{{/if}}

{{#unless isBrowser}}
const missingAnalyticsNodeError = new Error(`You must set an analytics-node instance:

>	const RudderAnalytics = require('@rudderstack/rudder-sdk-node');
>	const { setRudderTyperOptions } = require('./analytics')
>
>	const analytics = new RudderAnalytics(WRITE_KEY, DATA_PLANE_URL/v1/batch)
>	setRudderTyperOptions({
>		analytics: analytics,
>	})

For more information on analytics-node, see: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#installing-the-rudderstack-node-js-sdk
`)
{{/unless}}

{{!-- We use a closure so we can lazy-resolve window.rudderanalytics in browser environments. --}}
let analytics: () => ({{#if isBrowser}}any{{else}}AnalyticsNode{{/if}} | undefined) = () => {
	{{#if isBrowser}}
	return window.rudderanalytics
	{{else}}
	throw missingAnalyticsNodeError
	{{/if}}
}

/** Options to customize the runtime behavior of a RudderTyper client. */
export interface RudderTyperOptions {
	/**
	 * Underlying analytics instance where analytics calls are forwarded on to.
	 {{#if isBrowser}}
	 * Defaults to window.rudderanalytics.
	 {{/if}}
	 */
	analytics{{#if isBrowser}}?{{/if}}: {{#if isBrowser}}any{{else}}AnalyticsNode{{/if}}
	/**
	 * Handler fired when if an event does not match its spec. This handler
	 * does not fire in production mode, because it requires inlining the full
	 * JSON Schema spec for each event in your Tracking Plan.
	 *
	 * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
	 * if a message does not match the spec. Otherwise, errors will be logged to stderr.
	 */
	onViolation?: ViolationHandler
}

{{> setRudderTyperOptionsDocumentation}}
export function setRudderTyperOptions(options: RudderTyperOptions) {
	analytics = options.analytics ? () => options.analytics{{#if isBrowser}} || window.rudderanalytics{{/if}} : analytics
	{{#if isDevelopment}}
	onViolation = options.onViolation || onViolation
	{{/if}}
}

{{#if isDevelopment}}
/**
	* Validates a message against a JSON Schema using Ajv. If the message
	* is invalid, the `onViolation` handler will be called.
	*/
async function validateAgainstSchema(
	message: {{#if isBrowser}}Record<string, any>{{else}}PayloadMessage<Record<string, any>>{{/if}},
	schema: Schema
) {
	let ajv;
	if (schema['$schema'] && schema['$schema'].includes('draft-04')) {
		ajv = new AjvDraft4({
			allErrors: true,
			verbose: true
		})
	} else {
		ajv = new Ajv({
			allErrors: true,
			verbose: true
		})
		{{#if isBrowser}}
			const schemaDraft06 =await import('ajv/lib/refs/json-schema-draft-06.json');
		{{else}}
			const schemaDraft06 =await import('ajv/lib/refs/json-schema-draft-06.json', { assert: { type: 'json' } });
		{{/if}}
		ajv.addMetaSchema(schemaDraft06);
	}
	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
{{/if}}

/**
 * Helper to attach metadata on RudderTyper to outbound requests.
 * This is used for attribution and debugging by the RudderStack team.
 */
function withRudderTyperContext{{#unless isBrowser}}<P, T extends PayloadMessage<P>>{{/unless}}(message: {{#if isBrowser}}ApiOptions = {}{{else}}T{{/if}}): {{#if isBrowser}}ApiOptions{{else}}T{{/if}} {
	return {
		...message,
		context: {
			...((message.context as ApiObject)  || {}),
			ruddertyper: {
				sdk: '{{sdk}}',
				language: '{{language}}',
				rudderTyperVersion: '{{rudderTyperVersion}}',
				trackingPlanId: '{{trackingPlanId}}',
				trackingPlanVersion: {{trackingPlanVersion}},
            },
		},
	}
}

{{#unless isBrowser}}
/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#track
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */

/** 
* A message payload for an analytics-node `.page()` call.
* See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#page
* @typedef PageMessage<PropertiesType>
* @property {string | number} [userId] - The ID for this user in your database.
* @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
* @property {string} name - The name of the page viewed.
* @property {PropertiesType} [properties] - A dictionary of properties for the event.
* @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
* 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
* 		sure you to send a timestamp.
* @template PropertiesType
*/

/**
* A message payload for an analytics-node `.screen()` call.
* See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#screen
* @typedef ScreenMessage<PropertiesType>
* @property {string | number} [userId] - The ID for this user in your database.
* @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
* @property {string} name - The name of the screen viewed.
* @property {PropertiesType} [properties] - A dictionary of properties for the event.
* @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
* 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
* 		sure you to send a timestamp.
* @template PropertiesType
*/

/**
* A message payload for an analytics-node `.identify()` call.
* See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#identify
* @typedef IdentifyMessage<PropertiesType>
* @property {string | number} [userId] - The ID for this user in your database.
* @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
* @property {PropertiesType} [traits] - A dictionary of traits for the user.
* @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
* 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
* 		sure you to send a timestamp.
* @template PropertiesType
*/

/**
* A message payload for an analytics-node `.group()` call.
* See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#group
* @typedef GroupMessage<PropertiesType>
* @property {string | number} [userId] - The ID for this user in your database.
* @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
* @property {string} groupId - The ID for this group in your database.
* @property {PropertiesType} [traits] - A dictionary of traits for the group.
* @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
* 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
* 		sure you to send a timestamp.
* @template PropertiesType
*/
{{/unless}}

{{#each objects}}
	{{#if (or (not ../isBrowser) (and ../isBrowser (not (eq name "Screen"))))}}
		/**
		{{#if description}}
		* {{description}}
		{{/if}}
		* @typedef {{name}}
		{{#each properties}}
			{{!-- Note: this uses whitespace control to "escape" the outer curly braces. --}}
			{{!-- Note: The backticks enable JSDoc to parse names with spaces (without resorting to square brackets). --}}
			{{!-- Temporary removed backticks around required names below because of typescript compiler + JSDoc error. Will investigate. --}}
		* @property {{#if hasEnum}}{ {{~enumName~}} }{{else}}{ {{~type~}} }{{/if}} {{#if isRequired}}{{name}}{{else}}[{{name}}]{{/if}} - {{description}}
		{{/each}}
	*/
	{{/if}}
{{/each}}

{{#each tracks}}
{{> functionDocumentation isBrowser=../isBrowser event="track"}}
{{#if ../isBrowser}}
export function {{functionName}}(
	props{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
	options?: ApiOptions,
	callback?: apiCallback,
): void {
	const a = analytics();
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	const message = {
		event: '{{rawEventName}}',
		properties: props || {},
		options,
	}
	{{/if}}
	
	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			a.track(
			'{{rawEventName}}',
			props || {},
			withRudderTyperContext(options),
			callback
			);
		}
	{{/validateAndExecute}}
}
{{else}}
{{!-- Track call for node sdk --}}
export function {{functionName}}(
	trackMessage: TrackMessage<{{propertiesType}}>,
	callback?: apiCallback
): void {
	const message = withRudderTyperContext({
		...trackMessage,
		event: '{{rawEventName}}'
	})
	const a = analytics()
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			a.track(message, callback)
		} else {
			throw missingAnalyticsNodeError
		}
	{{/validateAndExecute}}
}
{{/if}}
{{/each}}

{{#each page}}
{{> functionDocumentation isBrowser=../isBrowser event="page"}}
{{#if ../isBrowser}}
export function {{functionName}}(
	category: string,
	name: string,
	props{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
	options?: ApiOptions,
	callback?: apiCallback,
): void;
export function {{functionName}}(
  name: string,
  props{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
  options?: ApiOptions,
  callback?: apiCallback,
): void;
export function {{functionName}}(
	props{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
	options?: ApiOptions,
	callback?: apiCallback,
): void;
export function {{functionName}}(
  categoryOrProps?: string | {{propertiesType}},
  nameOrPropsOrOptions?: string | {{propertiesType}} | ApiOptions,
  propsOrOptionsOrCallback?: {{propertiesType}} | ApiOptions | apiCallback,
  optionsOrCallback?: ApiOptions | apiCallback,
  callback?: apiCallback,
): void {
	const a = analytics();
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}

	let message: {
		event: string;
		properties: Page | {};
		options?: ApiOptions;
	} = { event: '{{rawEventName}}', properties: {}, options: undefined };

	if (typeof categoryOrProps === 'string' && typeof nameOrPropsOrOptions === 'string') {
		// Overload (category: string, name: string, props?: Page, options?: ApiOptions, callback?: apiCallback)
		message = {
		...message,
		properties: propsOrOptionsOrCallback || {},
		options: typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined,
		};
	} else if (typeof categoryOrProps === 'string') {
		// Overload (name: string, props?: Page, options?: ApiOptions, callback?: apiCallback)
		message = {
		...message,
		properties: nameOrPropsOrOptions || {},
		options: typeof propsOrOptionsOrCallback === 'object' && !Array.isArray(propsOrOptionsOrCallback) ? propsOrOptionsOrCallback as ApiOptions : undefined,
		};
	} else {
		// Overload (props?: Page, options?: ApiOptions, callback?: apiCallback)
		message = {
		...message,
		properties: categoryOrProps || {},
		options: typeof nameOrPropsOrOptions === 'object' && !Array.isArray(nameOrPropsOrOptions) ? nameOrPropsOrOptions as ApiOptions : undefined,
		};
	}
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			if (typeof categoryOrProps === 'string' && typeof nameOrPropsOrOptions === 'string') {
				// Overload (category: string, name: string, props?: {{propertiesType}}, options?: ApiOptions, callback?: apiCallback)
				a.page(
					categoryOrProps,
					'{{rawEventName}}',
					(propsOrOptionsOrCallback as {{propertiesType}}) || {},
					withRudderTyperContext(optionsOrCallback as ApiOptions),
					callback,
				);
			} else if (typeof categoryOrProps === 'string') {
				// Overload (name: string, props?: {{propertiesType}}, options?: ApiOptions, callback?: apiCallback)
				a.page(
					'{{rawEventName}}',
					(nameOrPropsOrOptions as {{propertiesType}}) || {},
					withRudderTyperContext(propsOrOptionsOrCallback as ApiOptions),
					optionsOrCallback as apiCallback,
				);
			} else {
				// Overload (props?: {{propertiesType}}, options?: ApiOptions, callback?: apiCallback)
				a.page(
					categoryOrProps || {},
					withRudderTyperContext(nameOrPropsOrOptions as ApiOptions),
					propsOrOptionsOrCallback as apiCallback,
				);
			}
		}
	{{/validateAndExecute}}
}
{{else}}
{{!-- Page call for node sdk --}}
export function {{functionName}}
(
	pageMessage: PageMessage<{{propertiesType}}>,
	callback?: apiCallback,
): void {
	const message = withRudderTyperContext({
		name: '',
		...pageMessage
	})
	const a = analytics();
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	{{/if}}
	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			a.page(message, callback)
		} else {
			throw missingAnalyticsNodeError
		}
	{{/validateAndExecute}}
}
{{/if}}
{{/each}}

{{#unless isBrowser}}
{{#each screen}}
{{> functionDocumentation isBrowser=../isBrowser event="screen"}}
{{!-- screen call for Node SDK --}}
export function {{functionName}}
(
	screenMessage: ScreenMessage<{{propertiesType}}>,
	callback?: apiCallback,
): void {
	const message = withRudderTyperContext({
		name: '',
		...screenMessage,
	})
	const a = analytics();
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			a.screen(message, callback)
		} else {
			throw missingAnalyticsNodeError
		}
	{{/validateAndExecute}}
}
{{/each}}
{{/unless}}


{{#each identify}}
{{> functionDocumentation isBrowser=../isBrowser event="identify"}}
{{#if ../isBrowser}}
export function {{functionName}}(
  userId: string,
  traits{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
  options?: ApiOptions,
  callback?: apiCallback,
): void;
export function {{functionName}}(traits{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}}, options?: ApiOptions, callback?: apiCallback): void;
export function {{functionName}}(
  userIdOrTraits?: string | Identify,
  traitsOrOptions{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}} | ApiOptions,
  optionsOrCallback?: ApiOptions | apiCallback,
  callback?: apiCallback,
): void {
	const a = analytics()
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	const message = {
		traits:
		typeof userIdOrTraits === 'string'
			? (traitsOrOptions as Identify)
			: (userIdOrTraits as Identify) || {},
		options:
		typeof userIdOrTraits === 'string'
			? (optionsOrCallback as ApiOptions)
			: (traitsOrOptions as ApiOptions),
	};
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			const userId = typeof userIdOrTraits === 'string' ? userIdOrTraits : undefined;
			const traits =
			typeof userIdOrTraits === 'string'
				? (traitsOrOptions as Identify)
				: (userIdOrTraits as Identify);
			const options =
			typeof userIdOrTraits === 'string'
				? (optionsOrCallback as ApiOptions)
				: (traitsOrOptions as ApiOptions);
			const cb = typeof userIdOrTraits === 'string' ? callback : (optionsOrCallback as apiCallback);

			a.identify(userId, traits || {}, withRudderTyperContext(options), cb);
		}
	{{/validateAndExecute}}
}
{{else}}
{{!-- Identify call for Node SDK --}}
export function {{functionName}}
(
	identifyMessage: IdentifyMessage<{{propertiesType}}>,
	callback?: apiCallback
): void {
	const message = withRudderTyperContext({
		...identifyMessage,
	})
	const a = analytics()
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	{{/if}}
	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			a.identify(message, callback)
		} else {
			throw missingAnalyticsNodeError
		}
	{{/validateAndExecute}}
}
{{/if}}
{{/each}}

{{#each group}}
{{> functionDocumentation isBrowser=../isBrowser event="group"}}
{{#if ../isBrowser}}
export function {{functionName}}(
  groupId: string,
  traits{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
  options?: ApiOptions,
  callback?: apiCallback,
): void;
export function {{functionName}}(traits{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}}, options?: ApiOptions, callback?: apiCallback): void;
export function {{functionName}}(
  groupIdOrTraits?: string | Group,
  traitsOrOptions{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}} | ApiOptions,
  optionsOrCallback?: ApiOptions | apiCallback,
  callback?: apiCallback,
): void {
	const a = analytics();
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	let message;
	if (typeof groupIdOrTraits === 'string') {
		message = {
		traits: (traitsOrOptions as Group) || {},
		options: optionsOrCallback as ApiOptions,
		};
	} else {
		message = {
		traits: (groupIdOrTraits as Group) || {},
		options: traitsOrOptions as ApiOptions,
		};
	}
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
		if (a) {
			if (typeof groupIdOrTraits === 'string') {
				const groupId = groupIdOrTraits;
				const traits = (traitsOrOptions as Group) || {};
				const options = optionsOrCallback as ApiOptions;
				a.group(groupId, traits, withRudderTyperContext(options), callback);
			} else {
				const traits = (groupIdOrTraits as Group) || {};
				const options = traitsOrOptions as ApiOptions;
				const cb = optionsOrCallback as apiCallback;
				a.group(traits, withRudderTyperContext(options), cb);
			}
		}
	{{/validateAndExecute}}
}
{{else}}
{{!-- Group call for Node SDK --}}
export function {{functionName}}
(
	groupMessage: GroupMessage<{{propertiesType}}>,
	callback?: apiCallback
): void {
	const message = withRudderTyperContext({
		groupId: '',
		...groupMessage,
	})
	const a = analytics()
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	{{/if}}

	{{#> validateAndExecute isDevelopment=../isDevelopment }}
	 if (a) {
			a.group(message, callback)
		} else {
			throw missingAnalyticsNodeError
		}
	{{/validateAndExecute}}
}
{{/if}}
{{/each}}

{{#if useProxy}}
const clientAPI = {
	{{> setRudderTyperOptionsDocumentation}}
	setRudderTyperOptions,
	{{#each tracks}}
	{{> functionDocumentation isBrowser=../isBrowser event="track"}}
	{{functionName}},
	{{/each}}
	{{#each page}}
	{{> functionDocumentation isBrowser=../isBrowser event="page"}}
	{{functionName}},
	{{/each}}
	{{#unless isBrowser}}
		{{#each screen}}
		{{> functionDocumentation isBrowser=../isBrowser event="screen"}}
		{{functionName}},
		{{/each}}
	{{/unless}}
	{{#each identify}}
	{{> functionDocumentation isBrowser=../isBrowser event="identify"}}
	{{functionName}},
	{{/each}}
	{{#each group}}
	{{> functionDocumentation isBrowser=../isBrowser event="group"}}
	{{functionName}},
	{{/each}}
}

export const RudderTyperAnalytics = new Proxy<typeof clientAPI>(clientAPI, {
	get(target, method) {
		if (typeof method === 'string' && Object.keys(target).includes(method)) {
			return target[method as keyof typeof clientAPI]
		}

		return () => {
			{{#if isDevelopment}}
			console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
    a) Re-generate your ruddertyper client: \`npx rudder-typer\`
    b) Add it to your Tracking Plan: {{trackingPlanURL}}`)
			{{/if}}
			const a = analytics()
			if (a) {
				{{#if isBrowser}}
				a.track('Unknown Analytics Call Fired',
					{
						method,
					},
					withRudderTyperContext()
				)
				{{else}}
				a.track(withRudderTyperContext({
					event: 'Unknown Analytics Call Fired',
					properties: {
						method : [method as string],
					},
					userId: 'ruddertyper'
				}))
				{{/if}}
			}
		}
	}
})
{{/if}}
