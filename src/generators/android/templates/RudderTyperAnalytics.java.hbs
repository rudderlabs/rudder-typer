/**
 * {{autogeneratedFileWarning}}
 */
package com.rudderstack.ruddertyper.generated;

import java.util.*;
import com.rudderstack.android.sdk.core.RudderClient;
import com.rudderstack.android.sdk.core.RudderOption;
import com.rudderstack.android.sdk.core.RudderProperty;
import android.content.Context;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import org.jetbrains.annotations.NotNull;


public class RudderTyperAnalytics {
    private final RudderClient rudderClient;

    /**
     * Return a reference to the global default {@link RudderTyperAnalytics} instance.
     * This will use your the global default {@link RudderClient} instance.
     * If you want to use a different {@link RudderClient} instance instance, see the
     * {@link RudderTyperAnalytics} constructor below.
     */
    public static RudderTyperAnalytics with(final Context context) {
        return new RudderTyperAnalytics(RudderClient.with(context));
    }

    /**
     * Initializes a new RudderTyperAnalytics instance wrapping the provided RudderStack client.
     * You very likely want to use RudderTyperAnalytics.with(context) method above instead, which
     * will utilize your existing singleton RudderStack {@link RudderClient} instance.
     *
     * @param rudderClient {@link RudderClient} configured RudderStack android client instance
     * @see <a href="https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-android-sdk#installing-the-sdk">Installing Android SDK</a>
     */
    public RudderTyperAnalytics(final @NonNull RudderClient rudderClient) {
        this.rudderClient = rudderClient;
    }

    {{#each tracks}}
    {{#if propsParam}}
    /**
     {{#if functionDescription}}
     *{{functionDescription}}
     {{/if}}
     * @param props {@link {{propsType ~}} } to add extra information to this call.
     * @see <a href="https://docs.rudderstack.com/rudderstack-api-spec/http-api-specification#7-track">Track Documentation</a>
     */
    public void {{functionName}}(final @Nullable {{propsType}} props) {
        if (props != null) {
            this.rudderClient.track("{{rawEventName}}", props.toRudderProperty(), RudderTyperUtils.addRudderTyperContext());
        } else {
            this.rudderClient.track("{{rawEventName}}", null, RudderTyperUtils.addRudderTyperContext());
        }
    }

    /**
     {{#if functionDescription}}
     * {{functionDescription}}
     {{/if}}
     * @param props {@link {{propsType ~}} } to add extra information to this call.
     * @see <a href="https://docs.rudderstack.com/rudderstack-api-spec/http-api-specification#7-track">Track Documentation</a>
     */
    public void {{functionName}}(final @Nullable {{propsType}} props, final @NotNull RudderOption options) {
        if (props != null) {
            this.rudderClient.track("{{rawEventName}}", props.toRudderProperty(), RudderTyperUtils.addRudderTyperContext(options));
        } else {
            this.rudderClient.track("{{rawEventName}}", null, RudderTyperUtils.addRudderTyperContext(options));
        }
    }
    {{else}}
    /**
     {{#if functionDescription}}
     *{{functionDescription}}
     {{/if}}
     * @see <a href="https://docs.rudderstack.com/rudderstack-api-spec/http-api-specification#7-track">Track Documentation</a>
     */
    public void {{functionName}}() {
        this.rudderClient.track("{{rawEventName}}", new RudderProperty(), RudderTyperUtils.addRudderTyperContext());
    }

    /**
     {{#if functionDescription}}
     * {{functionDescription}}
     {{/if}}
     * @see <a href="https://docs.rudderstack.com/rudderstack-api-spec/http-api-specification#7-track">Track Documentation</a>
     */
    public void {{functionName}}(final @NotNull RudderOption options)  {
        this.rudderClient.track("{{rawEventName}}", new RudderProperty(), RudderTyperUtils.addRudderTyperContext(options));
    }
    {{/if}}
    {{/each}}
}
