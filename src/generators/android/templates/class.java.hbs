/**
 * {{autogeneratedFileWarning}}
 */
package com.rudderstack.ruddertyper.generated;

import java.util.*;
import com.rudderstack.android.sdk.core.RudderProperty;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class {{name}} extends SerializableProperties {
    private RudderProperty properties;

    private {{name}}(RudderProperty properties) {
        this.properties = properties;
    }

    protected RudderProperty toRudderProperty() {
        return properties;
    }

    /**
     * Builder for {@link {{name ~}} }
     */
    public static class Builder {
        private RudderProperty properties;

        /**
         * Builder for {@link {{name ~}} }
         */
        public Builder() {
            properties = new RudderProperty();
        }
        {{#each properties}}

        /**
         {{#if description}}
         * {{description}}
         {{/if}}
         {{#if isRequired}}
         * This property is required to generate a valid {{../name}} object
         {{else}}
         * This property is optional and not required to generate a valid {{../name}} object
         {{/if}}
         */
        public Builder {{name}}(final {{#if isVariableNullable}}@Nullable{{else}}@NonNull{{/if}} {{#if hasEnum}}{{enumName}}{{else}}{{type}}{{/if}} {{name}}) {
            {{#if isListType}}
            List<?> p = RudderTyperUtils.serializeList({{name}});
            properties.put("{{rawName}}", p);
            {{else if implementsSerializableProperties}}
            if ({{name}} != null) {
                properties.putValue("{{rawName}}", {{name}}.toRudderProperty());
            } else {
                properties.put("{{rawName}}", {{name}});
            }
            {{else}}
            properties.put("{{rawName}}", {{name}});
            {{/if}}

            return this;
        }
        {{/each}}

        /**
         * Build an instance of {@link {{name ~}} }
         */
        public {{name}} build() {
            {{#each properties}}
            {{#if shouldThrowRuntimeError}}
            if(properties.getProperty("{{rawName}}") == null){
                throw new IllegalArgumentException("{{../name}} missing required property: {{rawName}}");
            }
            {{/if}}
            {{/each}}
            return new {{name}}(properties);
        }
    }
}
