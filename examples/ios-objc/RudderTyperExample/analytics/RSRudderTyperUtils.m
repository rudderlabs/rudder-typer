/**
 * This client was automatically generated by RudderTyper. ** Do Not Edit **
 */

#import "RSRudderTyperUtils.h"
#import <Rudder/Rudder.h>

@implementation RSRudderTyperUtils

+ (nonnull RSOption *)withRudderTyperContextFields:(nullable RSOption *)options
{
  options = options ?: [[RSOption alloc]init];
  NSDictionary<NSString *, id> *rudderTyperContext = @{
      @"sdk": @"analytics-ios",
      @"language": @"objective-c",
      @"rudderTyperVersion": @"1.0.0-beta.11",
      @"trackingPlanId": @"trackingPlanId",
      @"trackingPlanVersion": @"2"
    };
  [options putCustomContext:rudderTyperContext withKey:@"ruddertyper"];
  return options;
}

// This method exists primarily because we need to handle the complexity of arrays of arrays.
// Because of unknown nested array depth, we can't easily inline the serialization logic,
// instead we need to recurse over sub-objects for serialization.
+ (nonnull NSArray<id> *)toSerializableArray:(nonnull NSArray<id> *) arr {
    NSMutableArray *newArray = [[NSMutableArray alloc] init];
    [arr enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
        if ([element isKindOfClass:[NSArray class]]) {
            // This is an array of arrays.
            newArray[idx] = [RSRudderTyperUtils toSerializableArray:element];
        } else if ([element conformsToProtocol:@protocol(RSRudderTyperSerializable)]) {
            // This is an array of objects.
            newArray[idx] = [element toDictionary];
        } else {
            // This element must be otherwise serializable (string, number, etc).
            newArray[idx] = element;
        }
    }];
    
    return newArray;
}

@end
