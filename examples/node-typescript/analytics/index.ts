/**
 * This client was automatically generated by RudderTyper. ** Do Not Edit **
 */

/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 *
 * In order to support run-time validation of draft-04 JSON Schema we are using `ajv-draft-04`.
 * You can install it with: `npm install --save-dev ajv-draft-04`.
 *
 */
import Ajv, { ErrorObject } from 'ajv';
import AjvDraft4 from 'ajv-draft-04';
import * as Rudder from './rudder';
import { apiObject, apiCallback } from '@rudderstack/rudder-sdk-node';

export interface CartViewed extends apiObject {
  /**
   * Contains the cart ID of the cart to which the product was added
   */
  cart_id?: string;
  /**
   * Contains the list of products displayed in the product list
   */
  products?: any[];
}
export interface CheckoutStarted extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string;
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string;
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency?: string;
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number;
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id?: string;
  /**
   * Contains the list of products in the order or transaction
   */
  products?: any[];
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue?: number;
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number;
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number;
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  value?: number;
}
export interface CheckoutStepCompleted extends apiObject {
  /**
   * Contains the checkout transaction ID
   */
  checkout_id?: string;
  /**
   * Contains the payment method information
   */
  payment_method?: string;
  /**
   * Contains the information associated with the chosen shipping method
   */
  shipping_method?: string;
  /**
   * Contains the number associated with the checkout process step
   */
  step: number;
}
export interface CouponApplied extends apiObject {
  /**
   * Contains the cart ID, if applicable
   */
  cart_id?: string;
  /**
   * Contains the coupon ID
   */
  coupon_id?: string;
  /**
   * Contains the name of the coupon
   */
  coupon_name?: string;
  /**
   * Contains the amount of discount availed by applying the coupon
   */
  discount?: number;
  /**
   * Contains the order ID or the transaction ID, if applicable
   */
  order_id?: string;
}
export interface OrderCompleted extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string;
  /**
   * Contains the checkout ID
   */
  checkout_id?: string;
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string;
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency: string;
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number;
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id: string;
  /**
   * Contains the list of products in the order or transaction
   */
  products: any[];
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue: number;
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number;
  /**
   * Contains the order total after discounts but not including the taxes and shipping charges
   */
  subtotal?: number;
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number;
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  total?: number;
}
export interface PaymentInfoEntered extends apiObject {
  /**
   * Contains the checkout transaction ID
   */
  checkout_id?: string;
  /**
   * An optional string that contains the order ID
   */
  order_id?: string;
  /**
   * Contains the payment method information
   */
  payment_method?: string;
  /**
   * Contains the information associated with the chosen shipping method
   */
  shipping_method?: string;
  /**
   * Contains the number associated with the checkout process step
   */
  step: number;
}
export interface ProductAdded extends apiObject {
  /**
   * Brand of the product
   */
  brand?: string;
  /**
   * Cart ID associated with the product displayed
   */
  cart_id?: string;
  /**
   * Product category being viewed
   */
  category?: string;
  /**
   * Coupon code associated with the product
   */
  coupon?: string;
  /**
   * Image url of the product
   */
  image_url?: string;
  /**
   * Name of the product
   */
  name?: string;
  /**
   * Position of product in the list
   */
  position?: number;
  /**
   * Price of the product
   */
  price: number;
  /**
   * Database ID of the product
   */
  product_id: string;
  /**
   * Quantity of the product
   */
  quantity?: number;
  /**
   * Sku of the product
   */
  sku?: string;
  /**
   * URL of the product page for product
   */
  url?: string;
  /**
   * Variant of the product
   */
  variant?: string;
}
export interface ProductClicked extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string;
  /**
   * Contains the category of the product
   */
  category?: string;
  /**
   * Contains information on the coupon code associated with a product
   */
  coupon?: string;
  /**
   * Contains the image URL of the product
   */
  image_url?: string;
  /**
   * Contains the name of the product being viewed
   */
  name?: string;
  /**
   * Contains the position of the product in the product list
   */
  position?: number;
  /**
   * Contains the price of the product being viewed
   */
  price?: number;
  /**
   * Contains the database ID of the product being viewed
   */
  product_id: string;
  /**
   * Contains the quantity of the product
   */
  quantity?: number;
  /**
   * Contains the SKU of the product
   */
  sku?: string;
  /**
   * Contains the URL of the product page
   */
  url?: string;
  /**
   * Contains information of the variant associated with the product
   */
  variant?: string;
}
export interface ProductsSearched extends apiObject {
  /**
   * Contains the query that has been searched by the user
   */
  query: Record<string, any> | string;
}
export interface ProductViewed extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string;
  /**
   * Contains the category of the product
   */
  category?: string;
  /**
   * Contains information on the coupon code associated with a product
   */
  coupon?: string;
  /**
   * Contains the currency of the transaction
   */
  currency?: string;
  /**
   * Contains the image URL of the product
   */
  image_url?: string;
  /**
   * Containsthe name of the product being viewed
   */
  name?: string;
  /**
   * Contains the position of the product in the product list
   */
  position?: number;
  /**
   * Contains the price of the product being viewed
   */
  price?: number;
  /**
   * Contains the database ID of the product being viewed
   */
  product_id: string;
  /**
   * Contains the quantity of the product
   */
  quantity?: number;
  /**
   * Contains the SKU of the product
   */
  sku?: string;
  /**
   * Contains the URL of the product page
   */
  url?: string;
  /**
   * Contains information of the variant associated with the product
   */
  variant?: string;
}

export type ViolationHandler = (
  message: Rudder.TrackMessage<Record<string, any>>,
  violations: ErrorObject[],
) => void;

/**
 * The default handler that is fired if none is supplied with setRudderTyperOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
export const defaultValidationErrorHandler: ViolationHandler = (message, violations) => {
  const msg = JSON.stringify(
    {
      type: 'RudderTyper JSON Schema Validation Error',
      description:
        `You made an analytics call (${message.event}) using RudderTyper that doesn't match the ` +
        'Tracking Plan spec.',
      errors: violations,
    },
    undefined,
    2,
  );

  if (process.env.NODE_ENV === 'test') {
    throw new Error(msg);
  }
  console.warn(msg);
};

let onViolation = defaultValidationErrorHandler;

const missingAnalyticsNodeError = new Error(`You must set an analytics-node instance:

>	const RudderAnalytics = require('@rudderstack/rudder-sdk-node');
>	const { setRudderTyperOptions } = require('./analytics')
>
>	const analytics = new RudderAnalytics(WRITE_KEY, DATA_PLANE_URL/v1/batch)
>	setRudderTyperOptions({
>		analytics: analytics,
>	})

For more information on analytics-node, see: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#installing-the-rudderstack-node-js-sdk
`);

let analytics: () => Rudder.AnalyticsNode | undefined = () => {
  throw missingAnalyticsNodeError;
};

/** Options to customize the runtime behavior of a RudderTyper client. */
export interface RudderTyperOptions {
  /**
   * Underlying analytics instance where analytics calls are forwarded on to.
   */
  analytics: Rudder.AnalyticsNode;
  /**
   * Handler fired when if an event does not match its spec. This handler
   * does not fire in production mode, because it requires inlining the full
   * JSON Schema spec for each event in your Tracking Plan.
   *
   * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
   * if a message does not match the spec. Otherwise, errors will be logged to stderr.
   */
  onViolation?: ViolationHandler;
}

/**
 * Updates the run-time configuration of this RudderTyper client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {RudderTyperOptions} options - the options to upsert
 *
 * @typedef {Object} RudderTyperOptions
 * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setRudderTyperOptions(options: RudderTyperOptions) {
  analytics = options.analytics ? () => options.analytics : analytics;
  onViolation = options.onViolation || onViolation;
}

/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
async function validateAgainstSchema(
  message: Rudder.TrackMessage<Record<string, any>>,
  schema: Rudder.Schema,
) {
  let ajv;
  if (schema['$schema'] && schema['$schema'].includes('draft-04')) {
    ajv = new AjvDraft4({
      allErrors: true,
      verbose: true,
    });
  } else {
    ajv = new Ajv({
      allErrors: true,
      verbose: true,
    });
    const schemaDraft06 = await import('ajv/lib/refs/json-schema-draft-06.json', {
      assert: { type: 'json' },
    });
    ajv.addMetaSchema(schemaDraft06);
  }
  if (!ajv.validate(schema, message) && ajv.errors) {
    onViolation(message, ajv.errors);
  }
}

/**
 * Helper to attach metadata on RudderTyper to outbound requests.
 * This is used for attribution and debugging by the RudderStack team.
 */
function withRudderTyperContext<P, T extends Rudder.TrackMessage<P>>(message: T): T {
  return {
    ...message,
    context: {
      ...(message.context || {}),
      ruddertyper: {
        sdk: 'analytics-node',
        language: 'typescript',
        rudderTyperVersion: '1.0.0-beta.8',
        trackingPlanId: 'tp_2kuRZPE6pJYlWqdjC127h9BYJKq',
        trackingPlanVersion: 3,
      },
    },
  };
}

/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#track
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */

/**
 * @typedef CartViewed
 * @property {string} [cart_id] - Contains the cart ID of the cart to which the product was added
 * @property {any[]} [products] - Contains the list of products displayed in the product list
 */
/**
 * @typedef CheckoutStarted
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} [currency] - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} [order_id] - Contains the order ID or transaction ID, whichever is applicable
 * @property {any[]} [products] - Contains the list of products in the order or transaction
 * @property {number} [revenue] - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [value] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef CheckoutStepCompleted
 * @property {string} [checkout_id] - Contains the checkout transaction ID
 * @property {string} [payment_method] - Contains the payment method information
 * @property {string} [shipping_method] - Contains the information associated with the chosen shipping method
 * @property {number} step - Contains the number associated with the checkout process step
 */
/**
 * @typedef CouponApplied
 * @property {string} [cart_id] - Contains the cart ID, if applicable
 * @property {string} [coupon_id] - Contains the coupon ID
 * @property {string} [coupon_name] - Contains the name of the coupon
 * @property {number} [discount] - Contains the amount of discount availed by applying the coupon
 * @property {string} [order_id] - Contains the order ID or the transaction ID, if applicable
 */
/**
 * @typedef OrderCompleted
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [checkout_id] - Contains the checkout ID
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} currency - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} order_id - Contains the order ID or transaction ID, whichever is applicable
 * @property {any[]} products - Contains the list of products in the order or transaction
 * @property {number} revenue - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [subtotal] - Contains the order total after discounts but not including the taxes and shipping charges
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [total] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef PaymentInfoEntered
 * @property {string} [checkout_id] - Contains the checkout transaction ID
 * @property {string} [order_id] - An optional string that contains the order ID
 * @property {string} [payment_method] - Contains the payment method information
 * @property {string} [shipping_method] - Contains the information associated with the chosen shipping method
 * @property {number} step - Contains the number associated with the checkout process step
 */
/**
 * @typedef ProductAdded
 * @property {string} [brand] - Brand of the product
 * @property {string} [cart_id] - Cart ID associated with the product displayed
 * @property {string} [category] - Product category being viewed
 * @property {string} [coupon] - Coupon code associated with the product
 * @property {string} [image_url] - Image url of the product
 * @property {string} [name] - Name of the product
 * @property {number} [position] - Position of product in the list
 * @property {number} price - Price of the product
 * @property {string} product_id - Database ID of the product
 * @property {number} [quantity] - Quantity of the product
 * @property {string} [sku] - Sku of the product
 * @property {string} [url] - URL of the product page for product
 * @property {string} [variant] - Variant of the product
 */
/**
 * @typedef ProductClicked
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product
 * @property {string} [coupon] - Contains information on the coupon code associated with a product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product being viewed
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed
 * @property {string} product_id - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains information of the variant associated with the product
 */
/**
 * @typedef ProductsSearched
 * @property {Record<string, any> | string} query - Contains the query that has been searched by the user
 */
/**
 * @typedef ProductViewed
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product
 * @property {string} [coupon] - Contains information on the coupon code associated with a product
 * @property {string} [currency] - Contains the currency of the transaction
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Containsthe name of the product being viewed
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed
 * @property {string} product_id - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains information of the variant associated with the product
 */

/**
 * When a visitor views their cart
 *
 * @param {TrackMessage<CartViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function cartViewed(message: Rudder.TrackMessage<CartViewed>, callback?: apiCallback): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Cart Viewed',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID of the cart to which the product was added',
            type: ['string'],
          },
          products: {
            description: 'Contains the list of products displayed in the product list',
            type: ['array'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Cart Viewed',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor initiates the checkout process for their cart
 *
 * @param {TrackMessage<CheckoutStarted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function checkoutStarted(
  message: Rudder.TrackMessage<CheckoutStarted>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Checkout Started',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor initiates the checkout process for their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description: 'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description: 'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description: 'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
          products: {
            description: 'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description: 'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          tax: {
            description: 'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          value: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Checkout Started',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor completes a step in the checkout funnel
 *
 * @param {TrackMessage<CheckoutStepCompleted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function checkoutStepCompleted(
  message: Rudder.TrackMessage<CheckoutStepCompleted>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Checkout Step Completed',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor completes a step in the checkout funnel',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          checkout_id: {
            description: 'Contains the checkout transaction ID',
            type: ['string'],
          },
          payment_method: {
            description: 'Contains the payment method information',
            type: ['string'],
          },
          shipping_method: {
            description: 'Contains the information associated with the chosen shipping method',
            type: ['string'],
          },
          step: {
            description: 'Contains the number associated with the checkout process step',
            type: ['number'],
          },
        },
        required: ['step'],
        type: 'object',
      },
    },
    title: 'Checkout Step Completed',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor successfully applies a coupon to their transaction
 *
 * @param {TrackMessage<CouponApplied>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function couponApplied(
  message: Rudder.TrackMessage<CouponApplied>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Coupon Applied',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor successfully applies a coupon to their transaction',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID, if applicable',
            type: ['string'],
          },
          coupon_id: {
            description: 'Contains the coupon ID',
            type: ['string'],
          },
          coupon_name: {
            description: 'Contains the name of the coupon',
            type: ['string'],
          },
          discount: {
            description: 'Contains the amount of discount availed by applying the coupon',
            type: ['number'],
          },
          order_id: {
            description: 'Contains the order ID or the transaction ID, if applicable',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Coupon Applied',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor successfully places an order
 *
 * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function orderCompleted(
  message: Rudder.TrackMessage<OrderCompleted>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Order Completed',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor successfully places an order',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          checkout_id: {
            description: 'Contains the checkout ID',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description: 'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description: 'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description: 'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
          products: {
            description: 'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description: 'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          subtotal: {
            description:
              'Contains the order total after discounts but not including the taxes and shipping charges',
            type: ['number'],
          },
          tax: {
            description: 'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          total: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: ['order_id', 'revenue', 'currency', 'products'],
        type: 'object',
      },
    },
    title: 'Order Completed',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor successfully enters payment information during the checkout process
 *
 * @param {TrackMessage<PaymentInfoEntered>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function paymentInfoEntered(
  message: Rudder.TrackMessage<PaymentInfoEntered>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Payment Info Entered',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description:
      'When a visitor successfully enters payment information during the checkout process',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          checkout_id: {
            description: 'Contains the checkout transaction ID',
            type: ['string'],
          },
          order_id: {
            description: 'An optional string that contains the order ID',
            type: ['string'],
          },
          payment_method: {
            description: 'Contains the payment method information',
            type: ['string'],
          },
          shipping_method: {
            description: 'Contains the information associated with the chosen shipping method',
            type: ['string'],
          },
          step: {
            description: 'Contains the number associated with the checkout process step',
            type: ['number'],
          },
        },
        required: ['step'],
        type: 'object',
      },
    },
    title: 'Payment Info Entered',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * User added a product to their shopping cart
 *
 * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productAdded(
  message: Rudder.TrackMessage<ProductAdded>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Added',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'User added a product to their shopping cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description: 'Brand of the product',
            type: ['string'],
          },
          cart_id: {
            description: 'Cart ID associated with the product displayed',
            type: ['string'],
          },
          category: {
            description: 'Product category being viewed',
            type: ['string'],
          },
          coupon: {
            description: 'Coupon code associated with the product',
            type: ['string'],
          },
          image_url: {
            description: 'Image url of the product',
            type: ['string'],
          },
          name: {
            description: 'Name of the product',
            type: ['string'],
          },
          position: {
            description: 'Position of product in the list',
            type: ['integer'],
          },
          price: {
            description: 'Price of the product',
            type: ['number'],
          },
          product_id: {
            description: 'Database ID of the product',
            type: ['string'],
          },
          quantity: {
            description: 'Quantity of the product',
            type: ['integer'],
          },
          sku: {
            description: 'Sku of the product',
            type: ['string'],
          },
          url: {
            description: 'URL of the product page for product',
            type: ['string'],
          },
          variant: {
            description: 'Variant of the product',
            type: ['string'],
          },
        },
        required: ['product_id', 'price'],
        type: 'object',
      },
    },
    title: 'Product Added',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor clicks on a product from a Product List
 *
 * @param {TrackMessage<ProductClicked>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productClicked(
  message: Rudder.TrackMessage<ProductClicked>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Clicked',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor clicks on a product from a Product List',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description: 'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          coupon: {
            description: 'Contains information on the coupon code associated with a product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product being viewed',
            type: ['string'],
          },
          position: {
            description: 'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description: 'Contains the price of the product being viewed',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description: 'Contains information of the variant associated with the product',
            type: ['string'],
          },
        },
        required: ['product_id'],
        type: 'object',
      },
    },
    title: 'Product Clicked',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor performs a product search
 *
 * @param {TrackMessage<ProductsSearched>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productsSearched(
  message: Rudder.TrackMessage<ProductsSearched>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Products Searched',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor performs a product search',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          query: {
            description: 'Contains the query that has been searched by the user',
            type: ['object', 'string'],
          },
        },
        required: ['query'],
        type: 'object',
      },
    },
    title: 'Products Searched',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}
/**
 * When a visitor views details about a specific product
 *
 * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productViewed(
  message: Rudder.TrackMessage<ProductViewed>,
  callback?: apiCallback,
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Viewed',
  });
  const a = analytics();
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views details about a specific product',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description: 'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          coupon: {
            description: 'Contains information on the coupon code associated with a product',
            type: ['string'],
          },
          currency: {
            description: 'Contains the currency of the transaction',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Containsthe name of the product being viewed',
            type: ['string'],
          },
          position: {
            description: 'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description: 'Contains the price of the product being viewed',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description: 'Contains information of the variant associated with the product',
            type: ['string'],
          },
        },
        required: ['product_id'],
        type: 'object',
      },
    },
    title: 'Product Viewed',
    type: 'object',
  };
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback);
    } else {
      throw missingAnalyticsNodeError;
    }
  });
}

const clientAPI = {
  /**
   * Updates the run-time configuration of this RudderTyper client.
   * This function must be called with a configured analytics-node instance before firing
   * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
   *
   * @param {RudderTyperOptions} options - the options to upsert
   *
   * @typedef {Object} RudderTyperOptions
   * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
   * 		calls are forwarded on to.
   * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
   * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
   * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
   * 		will be logged to stderr.
   */
  setRudderTyperOptions,
  /**
   * When a visitor views their cart
   *
   * @param {TrackMessage<CartViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  cartViewed,
  /**
   * When a visitor initiates the checkout process for their cart
   *
   * @param {TrackMessage<CheckoutStarted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  checkoutStarted,
  /**
   * When a visitor completes a step in the checkout funnel
   *
   * @param {TrackMessage<CheckoutStepCompleted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  checkoutStepCompleted,
  /**
   * When a visitor successfully applies a coupon to their transaction
   *
   * @param {TrackMessage<CouponApplied>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  couponApplied,
  /**
   * When a visitor successfully places an order
   *
   * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  orderCompleted,
  /**
   * When a visitor successfully enters payment information during the checkout process
   *
   * @param {TrackMessage<PaymentInfoEntered>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  paymentInfoEntered,
  /**
   * User added a product to their shopping cart
   *
   * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productAdded,
  /**
   * When a visitor clicks on a product from a Product List
   *
   * @param {TrackMessage<ProductClicked>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productClicked,
  /**
   * When a visitor performs a product search
   *
   * @param {TrackMessage<ProductsSearched>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productsSearched,
  /**
   * When a visitor views details about a specific product
   *
   * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productViewed,
};

export const RudderTyperAnalytics = new Proxy<typeof clientAPI>(clientAPI, {
  get(target, method) {
    if (typeof method === 'string' && Object.keys(target).includes(method)) {
      return target[method as keyof typeof clientAPI];
    }

    return () => {
      console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
    a) Re-generate your ruddertyper client: \`npx rudder-typer\`
    b) Add it to your Tracking Plan: https://app.rudderstack.com/trackingplans/tp_2kuRZPE6pJYlWqdjC127h9BYJKq`);
      const a = analytics();
      if (a) {
        a.track(
          withRudderTyperContext({
            event: 'Unknown Analytics Call Fired',
            properties: {
              method: [method as string],
            },
            userId: 'ruddertyper',
          }),
        );
      }
    };
  },
});
