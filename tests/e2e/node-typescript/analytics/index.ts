/**
 * This client was automatically generated by RudderTyper. ** Do Not Edit **
 */

/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 *
 * In order to support run-time validation of draft-04 JSON Schema we are using `ajv-draft-04`.
 * You can install it with: `npm install --save-dev ajv-draft-04`.
 *
 */
import Ajv, { ErrorObject } from 'ajv'
import AjvDraft4 from 'ajv-draft-04'
import * as Rudder from './rudder'
import { apiObject, apiCallback } from '@rudderstack/rudder-sdk-node'

export interface CartShared extends apiObject {
  /**
   * Contains the ID of the shopping cart that is being shared
   */
  cart_id?: string
  /**
   * Contains information of the recipient
   */
  recipient?: string
  /**
   * Contains the message sent by the customer
   */
  share_message?: string
  /**
   * Contains information on the method of sharing the cart
   */
  share_via?: string
}
export interface CartViewed extends apiObject {
  /**
   * Contains the cart ID of the cart to which the product was added
   */
  cart_id?: string
  /**
   * Contains the list of products displayed in the product list
   */
  products?: any[]
}
export interface CheckoutStarted extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency?: string
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id?: string
  /**
   * Contains the list of products in the order or transaction
   */
  products?: any[]
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue?: number
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  value?: number
}
export interface CheckoutStepCompleted extends apiObject {
  /**
   * Contains the checkout transaction ID
   */
  checkout_id?: string
  /**
   * Contains the payment method information
   */
  payment_method?: string
  /**
   * Contains the information associated with the chosen shipping method
   */
  shipping_method?: string
  /**
   * Contains the number associated with the checkout process step
   */
  step: number
}
export interface CheckoutStepViewed extends apiObject {
  /**
   * Contains the checkout transaction ID
   */
  checkout_id?: string
  /**
   * Contains the payment method information
   */
  payment_method?: string
  /**
   * Contains the information associated with the chosen shipping method
   */
  shipping_method?: string
  /**
   * Contains the number associated with the checkout process step
   */
  step: number
}
export interface CouponApplied extends apiObject {
  /**
   * Contains the cart ID, if applicable
   */
  cart_id?: string
  /**
   * Contains the coupon ID
   */
  coupon_id?: string
  /**
   * Contains the name of the coupon
   */
  coupon_name?: string
  /**
   * Contains the amount of discount availed by applying the coupon
   */
  discount?: number
  /**
   * Contains the order ID or the transaction ID, if applicable
   */
  order_id?: string
}
export interface CouponDenied extends apiObject {
  /**
   * Contains the cart ID, if applicable
   */
  cart_id?: string
  /**
   * Contains the coupon ID
   */
  coupon_id?: string
  /**
   * Contains the name of the coupon
   */
  coupon_name?: string
  /**
   * Contains the order ID or the transaction ID, if applicable
   */
  order_id?: string
  /**
   * Contains the reason why the coupon was declined
   */
  reason?: string
}
export interface CouponEntered extends apiObject {
  /**
   * Contains the cart ID, if applicable
   */
  cart_id?: string
  /**
   * Contains the coupon ID
   */
  coupon_id?: string
  /**
   * Contains the order ID or the transaction ID, if applicable
   */
  order_id?: string
}
export interface CouponRemoved extends apiObject {
  /**
   * Contains the cart ID, if applicable
   */
  cart_id?: string
  /**
   * Contains the coupon ID
   */
  coupon_id?: string
  /**
   * Contains the name of the coupon
   */
  coupon_name?: string
  /**
   * Contains the amount of discount availed by applying the coupon
   */
  discount?: number
  /**
   * Contains the order ID or the transaction ID, if applicable
   */
  order_id?: string
}
export interface OrderCancelled extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency?: string
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number
  /**
   * Contains the order ID or transaction ID, whicheveris applicable
   */
  order_id: string
  /**
   * Contains the list of products in the order or transaction
   */
  products?: any[]
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue?: number
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  total?: number
}
export interface OrderCompleted extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string
  /**
   * Contains the checkout ID
   */
  checkout_id?: string
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency: string
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id: string
  /**
   * Contains the list of products in the order or transaction
   */
  products: any[]
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue: number
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number
  /**
   * Contains the order total after discounts but not including the taxes and shipping charges
   */
  subtotal?: number
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  total?: number
}
export interface OrderRefunded extends apiObject {
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id: string
}
export interface OrderUpdated extends apiObject {
  /**
   * Contains the store or affiliation details from where the transaction was started
   */
  affiliation?: string
  /**
   * Contains details of the transaction coupon which can be redeemed with the transaction
   */
  coupon?: string
  /**
   * Contains the currency code associated with an order or transaction
   */
  currency?: string
  /**
   * Contains the total discount associated with the transaction
   */
  discount?: number
  /**
   * Contains the order ID or transaction ID, whichever is applicable
   */
  order_id?: string
  /**
   * Contains the list of products in the order or transaction
   */
  products?: any[]
  /**
   * Contains the revenue associated with the transaction, excluding the shipping and tax details
   */
  revenue?: number
  /**
   * Contains the shipping cost associated with the order or transaction
   */
  shipping?: number
  /**
   * Contains the total tax associated with the order or the transaction
   */
  tax?: number
  /**
   * Contains the details of the revenue with the discount and coupons factored in
   */
  total?: number
}
export interface PaymentInfoEntered extends apiObject {
  /**
   * Contains the checkout transaction ID
   */
  checkout_id?: string
  /**
   * An optional string that contains the order ID
   */
  order_id?: string
  /**
   * Contains the payment method information
   */
  payment_method?: string
  /**
   * Contains the information associated with the chosen shipping method
   */
  shipping_method?: string
  /**
   * Contains the number associated with the checkout process step
   */
  step: number
}
export interface ProductAdded extends apiObject {
  /**
   * Brand of the product
   */
  brand?: string
  /**
   * Cart ID associated with the product displayed
   */
  cart_id?: string
  /**
   * Product category being viewed
   */
  category?: string
  /**
   * Coupon code associated with the product
   */
  coupon?: string
  /**
   * Image url of the product
   */
  image_url?: string
  /**
   * Name of the product
   */
  name?: string
  /**
   * Position of product in the list
   */
  position?: number
  /**
   * Price of the product
   */
  price: number
  /**
   * Database ID of the product
   */
  product_id: string
  /**
   * Quantity of the product
   */
  quantity?: number
  /**
   * Sku of the product
   */
  sku?: string
  /**
   * URL of the product page for product
   */
  url?: string
  /**
   * Variant of the product
   */
  variant?: string
}
export interface ProductAddedToWishlist extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product being viewed
   */
  category?: string
  /**
   * Contains information about the coupon code associated with the product
   */
  coupon?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Contains the name of the product
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed (in USD)
   */
  price?: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id?: string
  /**
   * Contains information on the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains the name of the variant associated with the product
   */
  variant?: string
  /**
   * Contains the wishlist ID to which the product was added
   */
  wishlist_id?: string
  /**
   * Contains the name of the wishlist to which the product was added
   */
  wishlist_name?: string
}
export interface ProductClicked extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product
   */
  category?: string
  /**
   * Contains information on the coupon code associated with a product
   */
  coupon?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Contains the name of the product being viewed
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed
   */
  price?: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id: string
  /**
   * Contains the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains information of the variant associated with the product
   */
  variant?: string
}
export interface ProductCompared extends apiObject {
  /**
   * Contains the list of products shared with the recipient
   */
  products?: any[]
}
export interface ProductListFiltered extends apiObject {
  /**
   * Contains the name of the product category being viewed
   */
  category?: string
  /**
   * Contain the product filters that the customer has applied
   */
  filters?: any[]
  /**
   * Contains the name of the product list being viewed
   */
  list_id?: string
  /**
   * Contains the products displayed in the product list
   */
  products?: any[]
  /**
   * Represents the product sorting used by the customer
   */
  sorts?: any[]
}
export interface ProductListViewed extends apiObject {
  /**
   * Contains the category of the product being viewed
   */
  category?: string
  /**
   * Contains the name of the product list being viewed
   */
  list_id?: string
  /**
   * Contains the array of products displayed in the product list
   */
  products?: any[]
}
export interface ProductRemoved extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the cart ID of the cart to which the product was added
   */
  cart_id?: string
  /**
   * Contains the category of the product
   */
  category?: string
  /**
   * Contains information on the coupon code associated with a product
   */
  coupon?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Contains the name of the product being viewed
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed
   */
  price: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id: string
  /**
   * Contains the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains information of the variant associated with the product
   */
  variant?: string
}
export interface ProductRemovedFromWishlist extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product being viewed
   */
  category?: string
  /**
   * Contains information about the coupon code associated with the product
   */
  coupon?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Contains the name of the product
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed (in USD)
   */
  price?: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id?: string
  /**
   * Contains information on the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains the name of the variant associated with the product
   */
  variant?: string
  /**
   * Contains the wishlist ID to which the product was added
   */
  wishlist_id?: string
  /**
   * Contains the name of the wishlist to which the product was added
   */
  wishlist_name?: string
}
export interface ProductReviewed extends apiObject {
  /**
   * Contains the ID of the product being reviewed
   */
  product_id?: string
  /**
   * Contains the rating of the product added by the customer in the review
   */
  rating?: string
  /**
   * Contains the body or the content of the review posted by the customer
   */
  review_body?: string
  /**
   * Contains the unique ID of the review being posted by the customer
   */
  review_id?: string
}
export interface ProductShared extends apiObject {
  /**
   * Contains the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product
   */
  category?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Contains the name of the product
   */
  name?: string
  /**
   * Contains the price of the product (in USD)
   */
  price?: number
  /**
   * Contains the Database ID of the product being shared
   */
  product_id?: string
  /**
   * Contains information on the recipient with whom the product is shared
   */
  recipient?: string
  /**
   * Contains the message sent by the customer
   */
  share_message?: string
  /**
   * Contains information on the method of sharing the product
   */
  share_via?: string
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product's page
   */
  url?: string
  /**
   * Contains the variant associated with the product
   */
  variant?: string
}
export interface ProductsSearched extends apiObject {
  /**
   * Contains the query that has been searched by the user
   */
  query: Record<string, any> | string
}
export interface ProductViewed extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product
   */
  category?: string
  /**
   * Contains information on the coupon code associated with a product
   */
  coupon?: string
  /**
   * Contains the currency of the transaction
   */
  currency?: string
  /**
   * Contains the image URL of the product
   */
  image_url?: string
  /**
   * Containsthe name of the product being viewed
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed
   */
  price?: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id: string
  /**
   * Contains the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains information of the variant associated with the product
   */
  variant?: string
}
export interface PromotionClicked extends apiObject {
  /**
   * Contains the creative details of the promotion
   */
  creative?: string
  /**
   * Contains the name of the promotion
   */
  name?: string
  /**
   * Contains information about the promotion’s position on the website/app
   */
  position?: string
  /**
   * Contains the ID of the promotion
   */
  promotion_id: string
}
export interface PromotionViewed extends apiObject {
  /**
   * Contains the creative details of the promotion
   */
  creative?: string
  /**
   * Contains the name of the promotion
   */
  name?: string
  /**
   * Contains information about the promotion’s position on the website/app
   */
  position?: string
  /**
   * Contains the ID of the promotion
   */
  promotion_id: string
}
export interface WishlistProductAddedToCart extends apiObject {
  /**
   * Contains the name of the brand associated with the product
   */
  brand?: string
  /**
   * Contains the category of the product being viewed
   */
  category?: string
  /**
   * Contains information about the coupon code associated with the product
   */
  coupon?: string
  /**
   * Contains the image URLof the product
   */
  image_url?: string
  /**
   * Contains the name of the product
   */
  name?: string
  /**
   * Contains the position of the product in the product list
   */
  position?: number
  /**
   * Contains the price of the product being viewed (in USD)
   */
  price?: number
  /**
   * Contains the database ID of the product being viewed
   */
  product_id?: string
  /**
   * Contains information on the quantity of the product
   */
  quantity?: number
  /**
   * Contains the SKU of the product
   */
  sku?: string
  /**
   * Contains the URL of the product page
   */
  url?: string
  /**
   * Contains the name of the variant associated with the product
   */
  variant?: string
  /**
   * Contains the wishlist ID to which the product was added
   */
  wishlist_id?: string
  /**
   * Contains the name of the wishlist to which the product was added
   */
  wishlist_name?: string
}

export type ViolationHandler = (
  message: Rudder.TrackMessage<Record<string, any>>,
  violations: ErrorObject[]
) => void

/**
 * The default handler that is fired if none is supplied with setRudderTyperOptions.
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 */
export const defaultValidationErrorHandler: ViolationHandler = (
  message,
  violations
) => {
  const msg = JSON.stringify(
    {
      type: 'RudderTyper JSON Schema Validation Error',
      description:
        `You made an analytics call (${message.event}) using RudderTyper that doesn't match the ` +
        'Tracking Plan spec.',
      errors: violations,
    },
    undefined,
    2
  )

  if (process.env.NODE_ENV === 'test') {
    throw new Error(msg)
  }
  console.warn(msg)
}

let onViolation = defaultValidationErrorHandler

const missingAnalyticsNodeError =
  new Error(`You must set an analytics-node instance:

>	const RudderAnalytics = require('@rudderstack/rudder-sdk-node');
>	const { setRudderTyperOptions } = require('./analytics')
>
>	const analytics = new RudderAnalytics(WRITE_KEY, DATA_PLANE_URL/v1/batch)
>	setRudderTyperOptions({
>		analytics: analytics,
>	})

For more information on analytics-node, see: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#installing-the-rudderstack-node-js-sdk
`)

let analytics: () => Rudder.AnalyticsNode | undefined = () => {
  throw missingAnalyticsNodeError
}

/** Options to customize the runtime behavior of a RudderTyper client. */
export interface RudderTyperOptions {
  /**
   * Underlying analytics instance where analytics calls are forwarded on to.
   */
  analytics: Rudder.AnalyticsNode
  /**
   * Handler fired when if an event does not match its spec. This handler
   * does not fire in production mode, because it requires inlining the full
   * JSON Schema spec for each event in your Tracking Plan.
   *
   * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
   * if a message does not match the spec. Otherwise, errors will be logged to stderr.
   */
  onViolation?: ViolationHandler
}

/**
 * Updates the run-time configuration of this RudderTyper client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 *
 * @param {RudderTyperOptions} options - the options to upsert
 *
 * @typedef {Object} RudderTyperOptions
 * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
 * 		calls are forwarded on to.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setRudderTyperOptions(options: RudderTyperOptions) {
  analytics = options.analytics ? () => options.analytics : analytics
  onViolation = options.onViolation || onViolation
}

/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
async function validateAgainstSchema(
  message: Rudder.TrackMessage<Record<string, any>>,
  schema: Rudder.Schema
) {
  let ajv
  if (schema['$schema'] && schema['$schema'].includes('draft-04')) {
    ajv = new AjvDraft4({
      allErrors: true,
      verbose: true,
    })
  } else {
    ajv = new Ajv({
      allErrors: true,
      verbose: true,
    })
    const schemaDraft06 = await import(
      'ajv/lib/refs/json-schema-draft-06.json',
      {
        assert: { type: 'json' },
      }
    )
    ajv.addMetaSchema(schemaDraft06)
  }
  if (!ajv.validate(schema, message) && ajv.errors) {
    onViolation(message, ajv.errors)
  }
}

/**
 * Helper to attach metadata on RudderTyper to outbound requests.
 * This is used for attribution and debugging by the RudderStack team.
 */
function withRudderTyperContext<P, T extends Rudder.TrackMessage<P>>(
  message: T
): T {
  return {
    ...message,
    context: {
      ...(message.context || {}),
      ruddertyper: {
        sdk: 'analytics-node',
        language: 'typescript',
        rudderTyperVersion: '1.0.0-beta.8',
        trackingPlanId: 'tp_2kbXKu4KM3SW2U0ghbAV9n1VC01',
        trackingPlanVersion: 2,
      },
    },
  }
}

/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://docs.rudderstack.com/stream-sources/rudderstack-sdk-integration-guides/rudderstack-node-sdk#track
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don't know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we'll use the server's time. If you're importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */

/**
 * @typedef CartShared
 * @property {string} [cart_id] - Contains the ID of the shopping cart that is being shared
 * @property {string} [recipient] - Contains information of the recipient
 * @property {string} [share_message] - Contains the message sent by the customer
 * @property {string} [share_via] - Contains information on the method of sharing the cart
 */
/**
 * @typedef CartViewed
 * @property {string} [cart_id] - Contains the cart ID of the cart to which the product was added
 * @property {any[]} [products] - Contains the list of products displayed in the product list
 */
/**
 * @typedef CheckoutStarted
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} [currency] - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} [order_id] - Contains the order ID or transaction ID, whichever is applicable
 * @property {any[]} [products] - Contains the list of products in the order or transaction
 * @property {number} [revenue] - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [value] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef CheckoutStepCompleted
 * @property {string} [checkout_id] - Contains the checkout transaction ID
 * @property {string} [payment_method] - Contains the payment method information
 * @property {string} [shipping_method] - Contains the information associated with the chosen shipping method
 * @property {number} step - Contains the number associated with the checkout process step
 */
/**
 * @typedef CheckoutStepViewed
 * @property {string} [checkout_id] - Contains the checkout transaction ID
 * @property {string} [payment_method] - Contains the payment method information
 * @property {string} [shipping_method] - Contains the information associated with the chosen shipping method
 * @property {number} step - Contains the number associated with the checkout process step
 */
/**
 * @typedef CouponApplied
 * @property {string} [cart_id] - Contains the cart ID, if applicable
 * @property {string} [coupon_id] - Contains the coupon ID
 * @property {string} [coupon_name] - Contains the name of the coupon
 * @property {number} [discount] - Contains the amount of discount availed by applying the coupon
 * @property {string} [order_id] - Contains the order ID or the transaction ID, if applicable
 */
/**
 * @typedef CouponDenied
 * @property {string} [cart_id] - Contains the cart ID, if applicable
 * @property {string} [coupon_id] - Contains the coupon ID
 * @property {string} [coupon_name] - Contains the name of the coupon
 * @property {string} [order_id] - Contains the order ID or the transaction ID, if applicable
 * @property {string} [reason] - Contains the reason why the coupon was declined
 */
/**
 * @typedef CouponEntered
 * @property {string} [cart_id] - Contains the cart ID, if applicable
 * @property {string} [coupon_id] - Contains the coupon ID
 * @property {string} [order_id] - Contains the order ID or the transaction ID, if applicable
 */
/**
 * @typedef CouponRemoved
 * @property {string} [cart_id] - Contains the cart ID, if applicable
 * @property {string} [coupon_id] - Contains the coupon ID
 * @property {string} [coupon_name] - Contains the name of the coupon
 * @property {number} [discount] - Contains the amount of discount availed by applying the coupon
 * @property {string} [order_id] - Contains the order ID or the transaction ID, if applicable
 */
/**
 * @typedef OrderCancelled
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} [currency] - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} order_id - Contains the order ID or transaction ID, whicheveris applicable
 * @property {any[]} [products] - Contains the list of products in the order or transaction
 * @property {number} [revenue] - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [total] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef OrderCompleted
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [checkout_id] - Contains the checkout ID
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} currency - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} order_id - Contains the order ID or transaction ID, whichever is applicable
 * @property {any[]} products - Contains the list of products in the order or transaction
 * @property {number} revenue - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [subtotal] - Contains the order total after discounts but not including the taxes and shipping charges
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [total] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef OrderRefunded
 * @property {string} order_id - Contains the order ID or transaction ID, whichever is applicable
 */
/**
 * @typedef OrderUpdated
 * @property {string} [affiliation] - Contains the store or affiliation details from where the transaction was started
 * @property {string} [coupon] - Contains details of the transaction coupon which can be redeemed with the transaction
 * @property {string} [currency] - Contains the currency code associated with an order or transaction
 * @property {number} [discount] - Contains the total discount associated with the transaction
 * @property {string} [order_id] - Contains the order ID or transaction ID, whichever is applicable
 * @property {any[]} [products] - Contains the list of products in the order or transaction
 * @property {number} [revenue] - Contains the revenue associated with the transaction, excluding the shipping and tax details
 * @property {number} [shipping] - Contains the shipping cost associated with the order or transaction
 * @property {number} [tax] - Contains the total tax associated with the order or the transaction
 * @property {number} [total] - Contains the details of the revenue with the discount and coupons factored in
 */
/**
 * @typedef PaymentInfoEntered
 * @property {string} [checkout_id] - Contains the checkout transaction ID
 * @property {string} [order_id] - An optional string that contains the order ID
 * @property {string} [payment_method] - Contains the payment method information
 * @property {string} [shipping_method] - Contains the information associated with the chosen shipping method
 * @property {number} step - Contains the number associated with the checkout process step
 */
/**
 * @typedef ProductAdded
 * @property {string} [brand] - Brand of the product
 * @property {string} [cart_id] - Cart ID associated with the product displayed
 * @property {string} [category] - Product category being viewed
 * @property {string} [coupon] - Coupon code associated with the product
 * @property {string} [image_url] - Image url of the product
 * @property {string} [name] - Name of the product
 * @property {number} [position] - Position of product in the list
 * @property {number} price - Price of the product
 * @property {string} product_id - Database ID of the product
 * @property {number} [quantity] - Quantity of the product
 * @property {string} [sku] - Sku of the product
 * @property {string} [url] - URL of the product page for product
 * @property {string} [variant] - Variant of the product
 */
/**
 * @typedef ProductAddedToWishlist
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product being viewed
 * @property {string} [coupon] - Contains information about the coupon code associated with the product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed (in USD)
 * @property {string} [product_id] - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains information on the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains the name of the variant associated with the product
 * @property {string} [wishlist_id] - Contains the wishlist ID to which the product was added
 * @property {string} [wishlist_name] - Contains the name of the wishlist to which the product was added
 */
/**
 * @typedef ProductClicked
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product
 * @property {string} [coupon] - Contains information on the coupon code associated with a product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product being viewed
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed
 * @property {string} product_id - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains information of the variant associated with the product
 */
/**
 * @typedef ProductCompared
 * @property {any[]} [products] - Contains the list of products shared with the recipient
 */
/**
 * @typedef ProductListFiltered
 * @property {string} [category] - Contains the name of the product category being viewed
 * @property {any[]} [filters] - Contain the product filters that the customer has applied
 * @property {string} [list_id] - Contains the name of the product list being viewed
 * @property {any[]} [products] - Contains the products displayed in the product list
 * @property {any[]} [sorts] - Represents the product sorting used by the customer
 */
/**
 * @typedef ProductListViewed
 * @property {string} [category] - Contains the category of the product being viewed
 * @property {string} [list_id] - Contains the name of the product list being viewed
 * @property {any[]} [products] - Contains the array of products displayed in the product list
 */
/**
 * @typedef ProductRemoved
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [cart_id] - Contains the cart ID of the cart to which the product was added
 * @property {string} [category] - Contains the category of the product
 * @property {string} [coupon] - Contains information on the coupon code associated with a product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product being viewed
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} price - Contains the price of the product being viewed
 * @property {string} product_id - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains information of the variant associated with the product
 */
/**
 * @typedef ProductRemovedFromWishlist
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product being viewed
 * @property {string} [coupon] - Contains information about the coupon code associated with the product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed (in USD)
 * @property {string} [product_id] - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains information on the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains the name of the variant associated with the product
 * @property {string} [wishlist_id] - Contains the wishlist ID to which the product was added
 * @property {string} [wishlist_name] - Contains the name of the wishlist to which the product was added
 */
/**
 * @typedef ProductReviewed
 * @property {string} [product_id] - Contains the ID of the product being reviewed
 * @property {string} [rating] - Contains the rating of the product added by the customer in the review
 * @property {string} [review_body] - Contains the body or the content of the review posted by the customer
 * @property {string} [review_id] - Contains the unique ID of the review being posted by the customer
 */
/**
 * @typedef ProductShared
 * @property {string} [brand] - Contains the brand associated with the product
 * @property {string} [category] - Contains the category of the product
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Contains the name of the product
 * @property {number} [price] - Contains the price of the product (in USD)
 * @property {string} [product_id] - Contains the Database ID of the product being shared
 * @property {string} [recipient] - Contains information on the recipient with whom the product is shared
 * @property {string} [share_message] - Contains the message sent by the customer
 * @property {string} [share_via] - Contains information on the method of sharing the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product's page
 * @property {string} [variant] - Contains the variant associated with the product
 */
/**
 * @typedef ProductsSearched
 * @property {Record<string, any> | string} query - Contains the query that has been searched by the user
 */
/**
 * @typedef ProductViewed
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product
 * @property {string} [coupon] - Contains information on the coupon code associated with a product
 * @property {string} [currency] - Contains the currency of the transaction
 * @property {string} [image_url] - Contains the image URL of the product
 * @property {string} [name] - Containsthe name of the product being viewed
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed
 * @property {string} product_id - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains information of the variant associated with the product
 */
/**
 * @typedef PromotionClicked
 * @property {string} [creative] - Contains the creative details of the promotion
 * @property {string} [name] - Contains the name of the promotion
 * @property {string} [position] - Contains information about the promotion’s position on the website/app
 * @property {string} promotion_id - Contains the ID of the promotion
 */
/**
 * @typedef PromotionViewed
 * @property {string} [creative] - Contains the creative details of the promotion
 * @property {string} [name] - Contains the name of the promotion
 * @property {string} [position] - Contains information about the promotion’s position on the website/app
 * @property {string} promotion_id - Contains the ID of the promotion
 */
/**
 * @typedef WishlistProductAddedToCart
 * @property {string} [brand] - Contains the name of the brand associated with the product
 * @property {string} [category] - Contains the category of the product being viewed
 * @property {string} [coupon] - Contains information about the coupon code associated with the product
 * @property {string} [image_url] - Contains the image URLof the product
 * @property {string} [name] - Contains the name of the product
 * @property {number} [position] - Contains the position of the product in the product list
 * @property {number} [price] - Contains the price of the product being viewed (in USD)
 * @property {string} [product_id] - Contains the database ID of the product being viewed
 * @property {number} [quantity] - Contains information on the quantity of the product
 * @property {string} [sku] - Contains the SKU of the product
 * @property {string} [url] - Contains the URL of the product page
 * @property {string} [variant] - Contains the name of the variant associated with the product
 * @property {string} [wishlist_id] - Contains the wishlist ID to which the product was added
 * @property {string} [wishlist_name] - Contains the name of the wishlist to which the product was added
 */

/**
 * When a visitor shares their cart
 *
 * @param {TrackMessage<CartShared>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function cartShared(
  message: Rudder.TrackMessage<CartShared>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Cart Shared',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor shares their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description:
              'Contains the ID of the shopping cart that is being shared',
            type: ['string'],
          },
          recipient: {
            description: 'Contains information of the recipient',
            type: ['string'],
          },
          share_message: {
            description: 'Contains the message sent by the customer',
            type: ['string'],
          },
          share_via: {
            description:
              'Contains information on the method of sharing the cart',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Cart Shared',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor views their cart
 *
 * @param {TrackMessage<CartViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function cartViewed(
  message: Rudder.TrackMessage<CartViewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Cart Viewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description:
              'Contains the cart ID of the cart to which the product was added',
            type: ['string'],
          },
          products: {
            description:
              'Contains the list of products displayed in the product list',
            type: ['array'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Cart Viewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor initiates the checkout process for their cart
 *
 * @param {TrackMessage<CheckoutStarted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function checkoutStarted(
  message: Rudder.TrackMessage<CheckoutStarted>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Checkout Started',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor initiates the checkout process for their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description:
              'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
          products: {
            description:
              'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description:
              'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          tax: {
            description:
              'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          value: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Checkout Started',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor completes a step in the checkout funnel
 *
 * @param {TrackMessage<CheckoutStepCompleted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function checkoutStepCompleted(
  message: Rudder.TrackMessage<CheckoutStepCompleted>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Checkout Step Completed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor completes a step in the checkout funnel',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          checkout_id: {
            description: 'Contains the checkout transaction ID',
            type: ['string'],
          },
          payment_method: {
            description: 'Contains the payment method information',
            type: ['string'],
          },
          shipping_method: {
            description:
              'Contains the information associated with the chosen shipping method',
            type: ['string'],
          },
          step: {
            description:
              'Contains the number associated with the checkout process step',
            type: ['number'],
          },
        },
        required: ['step'],
        type: 'object',
      },
    },
    title: 'Checkout Step Completed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor views a step in the checkout funnel
 *
 * @param {TrackMessage<CheckoutStepViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function checkoutStepViewed(
  message: Rudder.TrackMessage<CheckoutStepViewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Checkout Step Viewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views a step in the checkout funnel',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          checkout_id: {
            description: 'Contains the checkout transaction ID',
            type: ['string'],
          },
          payment_method: {
            description: 'Contains the payment method information',
            type: ['string'],
          },
          shipping_method: {
            description:
              'Contains the information associated with the chosen shipping method',
            type: ['string'],
          },
          step: {
            description:
              'Contains the number associated with the checkout process step',
            type: ['number'],
          },
        },
        required: ['step'],
        type: 'object',
      },
    },
    title: 'Checkout Step Viewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor successfully applies a coupon to their transaction
 *
 * @param {TrackMessage<CouponApplied>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function couponApplied(
  message: Rudder.TrackMessage<CouponApplied>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Coupon Applied',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description:
      'When a visitor successfully applies a coupon to their transaction',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID, if applicable',
            type: ['string'],
          },
          coupon_id: {
            description: 'Contains the coupon ID',
            type: ['string'],
          },
          coupon_name: {
            description: 'Contains the name of the coupon',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the amount of discount availed by applying the coupon',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or the transaction ID, if applicable',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Coupon Applied',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor attempts to apply an invalid coupon code
 *
 * @param {TrackMessage<CouponDenied>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function couponDenied(
  message: Rudder.TrackMessage<CouponDenied>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Coupon Denied',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor attempts to apply an invalid coupon code',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID, if applicable',
            type: ['string'],
          },
          coupon_id: {
            description: 'Contains the coupon ID',
            type: ['string'],
          },
          coupon_name: {
            description: 'Contains the name of the coupon',
            type: ['string'],
          },
          order_id: {
            description:
              'Contains the order ID or the transaction ID, if applicable',
            type: ['string'],
          },
          reason: {
            description: 'Contains the reason why the coupon was declined',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Coupon Denied',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor enters a coupon code during checkout
 *
 * @param {TrackMessage<CouponEntered>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function couponEntered(
  message: Rudder.TrackMessage<CouponEntered>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Coupon Entered',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor enters a coupon code during checkout',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID, if applicable',
            type: ['string'],
          },
          coupon_id: {
            description: 'Contains the coupon ID',
            type: ['string'],
          },
          order_id: {
            description:
              'Contains the order ID or the transaction ID, if applicable',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Coupon Entered',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor removes an already-applied coupon code
 *
 * @param {TrackMessage<CouponRemoved>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function couponRemoved(
  message: Rudder.TrackMessage<CouponRemoved>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Coupon Removed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor removes an already-applied coupon code',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          cart_id: {
            description: 'Contains the cart ID, if applicable',
            type: ['string'],
          },
          coupon_id: {
            description: 'Contains the coupon ID',
            type: ['string'],
          },
          coupon_name: {
            description: 'Contains the name of the coupon',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the amount of discount availed by applying the coupon',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or the transaction ID, if applicable',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Coupon Removed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor succesfully cancels their order
 *
 * @param {TrackMessage<OrderCancelled>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function orderCancelled(
  message: Rudder.TrackMessage<OrderCancelled>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Order Cancelled',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor succesfully cancels their order',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description:
              'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or transaction ID, whicheveris applicable',
            type: ['string'],
          },
          products: {
            description:
              'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description:
              'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          tax: {
            description:
              'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          total: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: ['order_id'],
        type: 'object',
      },
    },
    title: 'Order Cancelled',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor successfully places an order
 *
 * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function orderCompleted(
  message: Rudder.TrackMessage<OrderCompleted>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Order Completed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor successfully places an order',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          checkout_id: {
            description: 'Contains the checkout ID',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description:
              'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
          products: {
            description:
              'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description:
              'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          subtotal: {
            description:
              'Contains the order total after discounts but not including the taxes and shipping charges',
            type: ['number'],
          },
          tax: {
            description:
              'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          total: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: ['order_id', 'revenue', 'currency', 'products'],
        type: 'object',
      },
    },
    title: 'Order Completed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor successfully refunds their order
 *
 * @param {TrackMessage<OrderRefunded>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function orderRefunded(
  message: Rudder.TrackMessage<OrderRefunded>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Order Refunded',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor successfully refunds their order',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          order_id: {
            description:
              'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
        },
        required: ['order_id'],
        type: 'object',
      },
    },
    title: 'Order Refunded',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor updates their order or transaction
 *
 * @param {TrackMessage<OrderUpdated>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function orderUpdated(
  message: Rudder.TrackMessage<OrderUpdated>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Order Updated',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor updates their order or transaction',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          affiliation: {
            description:
              'Contains the store or affiliation details from where the transaction was started',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains details of the transaction coupon which can be redeemed with the transaction',
            type: ['string'],
          },
          currency: {
            description:
              'Contains the currency code associated with an order or transaction',
            type: ['string'],
          },
          discount: {
            description:
              'Contains the total discount associated with the transaction',
            type: ['number'],
          },
          order_id: {
            description:
              'Contains the order ID or transaction ID, whichever is applicable',
            type: ['string'],
          },
          products: {
            description:
              'Contains the list of products in the order or transaction',
            type: ['array'],
          },
          revenue: {
            description:
              'Contains the revenue associated with the transaction, excluding the shipping and tax details',
            type: ['number'],
          },
          shipping: {
            description:
              'Contains the shipping cost associated with the order or transaction',
            type: ['number'],
          },
          tax: {
            description:
              'Contains the total tax associated with the order or the transaction',
            type: ['number'],
          },
          total: {
            description:
              'Contains the details of the revenue with the discount and coupons factored in',
            type: ['number'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Order Updated',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor successfully enters payment information during the checkout process
 *
 * @param {TrackMessage<PaymentInfoEntered>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function paymentInfoEntered(
  message: Rudder.TrackMessage<PaymentInfoEntered>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Payment Info Entered',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description:
      'When a visitor successfully enters payment information during the checkout process',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          checkout_id: {
            description: 'Contains the checkout transaction ID',
            type: ['string'],
          },
          order_id: {
            description: 'An optional string that contains the order ID',
            type: ['string'],
          },
          payment_method: {
            description: 'Contains the payment method information',
            type: ['string'],
          },
          shipping_method: {
            description:
              'Contains the information associated with the chosen shipping method',
            type: ['string'],
          },
          step: {
            description:
              'Contains the number associated with the checkout process step',
            type: ['number'],
          },
        },
        required: ['step'],
        type: 'object',
      },
    },
    title: 'Payment Info Entered',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * User added a product to their shopping cart
 *
 * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productAdded(
  message: Rudder.TrackMessage<ProductAdded>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Added',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'User added a product to their shopping cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description: 'Brand of the product',
            type: ['string'],
          },
          cart_id: {
            description: 'Cart ID associated with the product displayed',
            type: ['string'],
          },
          category: {
            description: 'Product category being viewed',
            type: ['string'],
          },
          coupon: {
            description: 'Coupon code associated with the product',
            type: ['string'],
          },
          image_url: {
            description: 'Image url of the product',
            type: ['string'],
          },
          name: {
            description: 'Name of the product',
            type: ['string'],
          },
          position: {
            description: 'Position of product in the list',
            type: ['integer'],
          },
          price: {
            description: 'Price of the product',
            type: ['number'],
          },
          product_id: {
            description: 'Database ID of the product',
            type: ['string'],
          },
          quantity: {
            description: 'Quantity of the product',
            type: ['integer'],
          },
          sku: {
            description: 'Sku of the product',
            type: ['string'],
          },
          url: {
            description: 'URL of the product page for product',
            type: ['string'],
          },
          variant: {
            description: 'Variant of the product',
            type: ['string'],
          },
        },
        required: ['product_id', 'price'],
        type: 'object',
      },
    },
    title: 'Product Added',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor adds a product to their wishlist
 *
 * @param {TrackMessage<ProductAddedToWishlist>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productAddedToWishlist(
  message: Rudder.TrackMessage<ProductAddedToWishlist>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Added to Wishlist',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor adds a product to their wishlist',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product being viewed',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information about the coupon code associated with the product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description:
              'Contains the price of the product being viewed (in USD)',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains information on the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains the name of the variant associated with the product',
            type: ['string'],
          },
          wishlist_id: {
            description:
              'Contains the wishlist ID to which the product was added',
            type: ['string'],
          },
          wishlist_name: {
            description:
              'Contains the name of the wishlist to which the product was added',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product Added to Wishlist',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor clicks on a product from a Product List
 *
 * @param {TrackMessage<ProductClicked>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productClicked(
  message: Rudder.TrackMessage<ProductClicked>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Clicked',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor clicks on a product from a Product List',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information on the coupon code associated with a product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product being viewed',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description: 'Contains the price of the product being viewed',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains information of the variant associated with the product',
            type: ['string'],
          },
        },
        required: ['product_id'],
        type: 'object',
      },
    },
    title: 'Product Clicked',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When the user clicks to generate a product comparison
 *
 * @param {TrackMessage<ProductCompared>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productCompared(
  message: Rudder.TrackMessage<ProductCompared>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Compared',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When the user clicks to generate a product comparison',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          products: {
            description:
              'Contains the list of products shared with the recipient',
            type: ['array'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product Compared',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor filters a list or category of products
 *
 * @param {TrackMessage<ProductListFiltered>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productListFiltered(
  message: Rudder.TrackMessage<ProductListFiltered>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product List Filtered',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor filters a list or category of products',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          category: {
            description:
              'Contains the name of the product category being viewed',
            type: ['string'],
          },
          filters: {
            description:
              'Contain the product filters that the customer has applied',
            type: ['array'],
          },
          list_id: {
            description: 'Contains the name of the product list being viewed',
            type: ['string'],
          },
          products: {
            description: 'Contains the products displayed in the product list',
            type: ['array'],
          },
          sorts: {
            description: 'Represents the product sorting used by the customer',
            type: ['array'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product List Filtered',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor views a list or category of products
 *
 * @param {TrackMessage<ProductListViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productListViewed(
  message: Rudder.TrackMessage<ProductListViewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product List Viewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views a list or category of products',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          category: {
            description: 'Contains the category of the product being viewed',
            type: ['string'],
          },
          list_id: {
            description: 'Contains the name of the product list being viewed',
            type: ['string'],
          },
          products: {
            description:
              'Contains the array of products displayed in the product list',
            type: ['array'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product List Viewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor removes a product from their cart
 *
 * @param {TrackMessage<ProductRemoved>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productRemoved(
  message: Rudder.TrackMessage<ProductRemoved>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Removed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor removes a product from their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          cart_id: {
            description:
              'Contains the cart ID of the cart to which the product was added',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information on the coupon code associated with a product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product being viewed',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description: 'Contains the price of the product being viewed',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains information of the variant associated with the product',
            type: ['string'],
          },
        },
        required: ['product_id', 'price'],
        type: 'object',
      },
    },
    title: 'Product Removed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor removes a product from their wishlist
 *
 * @param {TrackMessage<ProductRemovedFromWishlist>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productRemovedFromWishlist(
  message: Rudder.TrackMessage<ProductRemovedFromWishlist>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Removed from Wishlist',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor removes a product from their wishlist',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product being viewed',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information about the coupon code associated with the product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description:
              'Contains the price of the product being viewed (in USD)',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains information on the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains the name of the variant associated with the product',
            type: ['string'],
          },
          wishlist_id: {
            description:
              'Contains the wishlist ID to which the product was added',
            type: ['string'],
          },
          wishlist_name: {
            description:
              'Contains the name of the wishlist to which the product was added',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product Removed from Wishlist',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor successfully submits a product review
 *
 * @param {TrackMessage<ProductReviewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productReviewed(
  message: Rudder.TrackMessage<ProductReviewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Reviewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor successfully submits a product review',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          product_id: {
            description: 'Contains the ID of the product being reviewed',
            type: ['string'],
          },
          rating: {
            description:
              'Contains the rating of the product added by the customer in the review',
            type: ['string'],
          },
          review_body: {
            description:
              'Contains the body or the content of the review posted by the customer',
            type: ['string'],
          },
          review_id: {
            description:
              'Contains the unique ID of the review being posted by the customer',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product Reviewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor shares a product
 *
 * @param {TrackMessage<ProductShared>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productShared(
  message: Rudder.TrackMessage<ProductShared>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Shared',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor shares a product',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description: 'Contains the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product',
            type: ['string'],
          },
          price: {
            description: 'Contains the price of the product (in USD)',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the Database ID of the product being shared',
            type: ['string'],
          },
          recipient: {
            description:
              'Contains information on the recipient with whom the product is shared',
            type: ['string'],
          },
          share_message: {
            description: 'Contains the message sent by the customer',
            type: ['string'],
          },
          share_via: {
            description:
              'Contains information on the method of sharing the product',
            type: ['string'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: "Contains the URL of the product's page",
            type: ['string'],
          },
          variant: {
            description: 'Contains the variant associated with the product',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Product Shared',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor performs a product search
 *
 * @param {TrackMessage<ProductsSearched>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productsSearched(
  message: Rudder.TrackMessage<ProductsSearched>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Products Searched',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor performs a product search',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          query: {
            description:
              'Contains the query that has been searched by the user',
            type: ['object', 'string'],
          },
        },
        required: ['query'],
        type: 'object',
      },
    },
    title: 'Products Searched',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor views details about a specific product
 *
 * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function productViewed(
  message: Rudder.TrackMessage<ProductViewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Product Viewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor views details about a specific product',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information on the coupon code associated with a product',
            type: ['string'],
          },
          currency: {
            description: 'Contains the currency of the transaction',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URL of the product',
            type: ['string'],
          },
          name: {
            description: 'Containsthe name of the product being viewed',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description: 'Contains the price of the product being viewed',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains information of the variant associated with the product',
            type: ['string'],
          },
        },
        required: ['product_id'],
        type: 'object',
      },
    },
    title: 'Product Viewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * This event is fired whenever a visitor clicks on a promotion or offer.
 *
 * @param {TrackMessage<PromotionClicked>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function promotionClicked(
  message: Rudder.TrackMessage<PromotionClicked>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Promotion Clicked',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description:
      'This event is fired whenever a visitor clicks on a promotion or offer.',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          creative: {
            description: 'Contains the creative details of the promotion',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the promotion',
            type: ['string'],
          },
          position: {
            description:
              'Contains information about the promotion’s position on the website/app',
            type: ['string'],
          },
          promotion_id: {
            description: 'Contains the ID of the promotion',
            type: ['string'],
          },
        },
        required: ['promotion_id'],
        type: 'object',
      },
    },
    title: 'Promotion Clicked',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * This event is fired whenever a user views a website promotion or offer.
 *
 * @param {TrackMessage<PromotionViewed>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function promotionViewed(
  message: Rudder.TrackMessage<PromotionViewed>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Promotion Viewed',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description:
      'This event is fired whenever a user views a website promotion or offer. ',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          creative: {
            description: 'Contains the creative details of the promotion',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the promotion',
            type: ['string'],
          },
          position: {
            description:
              'Contains information about the promotion’s position on the website/app',
            type: ['string'],
          },
          promotion_id: {
            description: 'Contains the ID of the promotion',
            type: ['string'],
          },
        },
        required: ['promotion_id'],
        type: 'object',
      },
    },
    title: 'Promotion Viewed',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}
/**
 * When a visitor adds a wishlisted product to their cart
 *
 * @param {TrackMessage<WishlistProductAddedToCart>} message - The analytics properties that will be sent to RudderStack.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function wishlistProductAddedToCart(
  message: Rudder.TrackMessage<WishlistProductAddedToCart>,
  callback?: apiCallback
): void {
  const msg = withRudderTyperContext({
    properties: {},
    ...message,
    event: 'Wishlist Product Added to Cart',
  })
  const a = analytics()
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    description: 'When a visitor adds a wishlisted product to their cart',
    properties: {
      properties: {
        additionalProperties: true,
        properties: {
          brand: {
            description:
              'Contains the name of the brand associated with the product',
            type: ['string'],
          },
          category: {
            description: 'Contains the category of the product being viewed',
            type: ['string'],
          },
          coupon: {
            description:
              'Contains information about the coupon code associated with the product',
            type: ['string'],
          },
          image_url: {
            description: 'Contains the image URLof the product',
            type: ['string'],
          },
          name: {
            description: 'Contains the name of the product',
            type: ['string'],
          },
          position: {
            description:
              'Contains the position of the product in the product list',
            type: ['number'],
          },
          price: {
            description:
              'Contains the price of the product being viewed (in USD)',
            type: ['number'],
          },
          product_id: {
            description: 'Contains the database ID of the product being viewed',
            type: ['string'],
          },
          quantity: {
            description: 'Contains information on the quantity of the product',
            type: ['number'],
          },
          sku: {
            description: 'Contains the SKU of the product',
            type: ['string'],
          },
          url: {
            description: 'Contains the URL of the product page',
            type: ['string'],
          },
          variant: {
            description:
              'Contains the name of the variant associated with the product',
            type: ['string'],
          },
          wishlist_id: {
            description:
              'Contains the wishlist ID to which the product was added',
            type: ['string'],
          },
          wishlist_name: {
            description:
              'Contains the name of the wishlist to which the product was added',
            type: ['string'],
          },
        },
        required: [],
        type: 'object',
      },
    },
    title: 'Wishlist Product Added to Cart',
    type: 'object',
  }
  validateAgainstSchema(msg, schema).then(() => {
    if (a) {
      a.track(msg, callback)
    } else {
      throw missingAnalyticsNodeError
    }
  })
}

const clientAPI = {
  /**
   * Updates the run-time configuration of this RudderTyper client.
   * This function must be called with a configured analytics-node instance before firing
   * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
   *
   * @param {RudderTyperOptions} options - the options to upsert
   *
   * @typedef {Object} RudderTyperOptions
   * @property {Rudder.AnalyticsNode} analytics - Underlying analytics instance where analytics
   * 		calls are forwarded on to.
   * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
   * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
   * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
   * 		will be logged to stderr.
   */
  setRudderTyperOptions,
  /**
   * When a visitor shares their cart
   *
   * @param {TrackMessage<CartShared>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  cartShared,
  /**
   * When a visitor views their cart
   *
   * @param {TrackMessage<CartViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  cartViewed,
  /**
   * When a visitor initiates the checkout process for their cart
   *
   * @param {TrackMessage<CheckoutStarted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  checkoutStarted,
  /**
   * When a visitor completes a step in the checkout funnel
   *
   * @param {TrackMessage<CheckoutStepCompleted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  checkoutStepCompleted,
  /**
   * When a visitor views a step in the checkout funnel
   *
   * @param {TrackMessage<CheckoutStepViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  checkoutStepViewed,
  /**
   * When a visitor successfully applies a coupon to their transaction
   *
   * @param {TrackMessage<CouponApplied>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  couponApplied,
  /**
   * When a visitor attempts to apply an invalid coupon code
   *
   * @param {TrackMessage<CouponDenied>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  couponDenied,
  /**
   * When a visitor enters a coupon code during checkout
   *
   * @param {TrackMessage<CouponEntered>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  couponEntered,
  /**
   * When a visitor removes an already-applied coupon code
   *
   * @param {TrackMessage<CouponRemoved>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  couponRemoved,
  /**
   * When a visitor succesfully cancels their order
   *
   * @param {TrackMessage<OrderCancelled>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  orderCancelled,
  /**
   * When a visitor successfully places an order
   *
   * @param {TrackMessage<OrderCompleted>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  orderCompleted,
  /**
   * When a visitor successfully refunds their order
   *
   * @param {TrackMessage<OrderRefunded>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  orderRefunded,
  /**
   * When a visitor updates their order or transaction
   *
   * @param {TrackMessage<OrderUpdated>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  orderUpdated,
  /**
   * When a visitor successfully enters payment information during the checkout process
   *
   * @param {TrackMessage<PaymentInfoEntered>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  paymentInfoEntered,
  /**
   * User added a product to their shopping cart
   *
   * @param {TrackMessage<ProductAdded>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productAdded,
  /**
   * When a visitor adds a product to their wishlist
   *
   * @param {TrackMessage<ProductAddedToWishlist>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productAddedToWishlist,
  /**
   * When a visitor clicks on a product from a Product List
   *
   * @param {TrackMessage<ProductClicked>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productClicked,
  /**
   * When the user clicks to generate a product comparison
   *
   * @param {TrackMessage<ProductCompared>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productCompared,
  /**
   * When a visitor filters a list or category of products
   *
   * @param {TrackMessage<ProductListFiltered>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productListFiltered,
  /**
   * When a visitor views a list or category of products
   *
   * @param {TrackMessage<ProductListViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productListViewed,
  /**
   * When a visitor removes a product from their cart
   *
   * @param {TrackMessage<ProductRemoved>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productRemoved,
  /**
   * When a visitor removes a product from their wishlist
   *
   * @param {TrackMessage<ProductRemovedFromWishlist>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productRemovedFromWishlist,
  /**
   * When a visitor successfully submits a product review
   *
   * @param {TrackMessage<ProductReviewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productReviewed,
  /**
   * When a visitor shares a product
   *
   * @param {TrackMessage<ProductShared>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productShared,
  /**
   * When a visitor performs a product search
   *
   * @param {TrackMessage<ProductsSearched>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productsSearched,
  /**
   * When a visitor views details about a specific product
   *
   * @param {TrackMessage<ProductViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  productViewed,
  /**
   * This event is fired whenever a visitor clicks on a promotion or offer.
   *
   * @param {TrackMessage<PromotionClicked>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  promotionClicked,
  /**
   * This event is fired whenever a user views a website promotion or offer.
   *
   * @param {TrackMessage<PromotionViewed>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  promotionViewed,
  /**
   * When a visitor adds a wishlisted product to their cart
   *
   * @param {TrackMessage<WishlistProductAddedToCart>} message - The analytics properties that will be sent to RudderStack.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  wishlistProductAddedToCart,
}

export const RudderTyperAnalytics = new Proxy<typeof clientAPI>(clientAPI, {
  get(target, method) {
    if (typeof method === 'string' && Object.keys(target).includes(method)) {
      return target[method as keyof typeof clientAPI]
    }

    return () => {
      console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
    a) Re-generate your ruddertyper client: \`npx rudder-typer\`
    b) Add it to your Tracking Plan: https://app.rudderstack.com/trackingplans/tp_2kbXKu4KM3SW2U0ghbAV9n1VC01`)
      const a = analytics()
      if (a) {
        a.track(
          withRudderTyperContext({
            event: 'Unknown Analytics Call Fired',
            properties: {
              method: [method as string],
            },
            userId: 'ruddertyper',
          })
        )
      }
    }
  },
})
